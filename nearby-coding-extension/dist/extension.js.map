{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://nearby-coding-extension/./src/GrowthSystem.ts","webpack://nearby-coding-extension/./src/types.ts","webpack://nearby-coding-extension/external commonjs \"vscode\"","webpack://nearby-coding-extension/./src/extension.ts","webpack://nearby-coding-extension/webpack/bootstrap","webpack://nearby-coding-extension/webpack/startup"],"sourcesContent":["import {\r\n    AvatarType,\r\n    calculateLevel,\r\n    EncounterRecord,\r\n    getNewlyUnlockedAvatars,\r\n    getTodayString,\r\n    LoginRecord,\r\n    User\r\n} from './types';\r\n\r\n/**\r\n * 出社アバター機能の成長システムを管理するクラス\r\n */\r\nexport class GrowthSystem {\r\n  private encounters: EncounterRecord[] = [];\r\n  private logins: LoginRecord[] = [];\r\n\r\n  constructor(\r\n    encounters: EncounterRecord[] = [],\r\n    logins: LoginRecord[] = []\r\n  ) {\r\n    this.encounters = encounters;\r\n    this.logins = logins;\r\n  }\r\n\r\n  /**\r\n   * ログイン処理とXP付与\r\n   */\r\n  processLogin(user: User): { \r\n    xpGained: number; \r\n    levelUp: boolean; \r\n    newLevel: number; \r\n    unlockedAvatars: AvatarType[] \r\n  } {\r\n    const today = getTodayString();\r\n    const hasLoggedInToday = this.logins.some(\r\n      login => login.userId === user.id && login.date === today\r\n    );\r\n\r\n    if (hasLoggedInToday) {\r\n      // 既にログイン済み\r\n      return { \r\n        xpGained: 0, \r\n        levelUp: false, \r\n        newLevel: user.level, \r\n        unlockedAvatars: [] \r\n      };\r\n    }\r\n\r\n    // 新規ログイン記録\r\n    this.logins.push({\r\n      userId: user.id,\r\n      timestamp: Date.now(),\r\n      date: today\r\n    });\r\n\r\n    return this.addXP(user, 10, 'login');\r\n  }\r\n\r\n  /**\r\n   * 遭遇処理とXP付与\r\n   */\r\n  processEncounter(user: User, otherUserId: string): {\r\n    xpGained: number;\r\n    levelUp: boolean;\r\n    newLevel: number;\r\n    unlockedAvatars: AvatarType[];\r\n  } {\r\n    const today = getTodayString();\r\n    const hasEncounteredToday = this.encounters.some(\r\n      encounter => \r\n        encounter.userId === user.id && \r\n        encounter.otherUserId === otherUserId && \r\n        encounter.date === today\r\n    );\r\n\r\n    if (hasEncounteredToday) {\r\n      // 既に今日遭遇済み\r\n      return { \r\n        xpGained: 0, \r\n        levelUp: false, \r\n        newLevel: user.level, \r\n        unlockedAvatars: [] \r\n      };\r\n    }\r\n\r\n    // 新規遭遇記録\r\n    this.encounters.push({\r\n      userId: user.id,\r\n      otherUserId: otherUserId,\r\n      date: today\r\n    });\r\n\r\n    return this.addXP(user, 5, 'encounter');\r\n  }\r\n\r\n  /**\r\n   * XP追加とレベルアップ判定\r\n   */\r\n  private addXP(user: User, xpAmount: number, source: 'login' | 'encounter'): {\r\n    xpGained: number;\r\n    levelUp: boolean;\r\n    newLevel: number;\r\n    unlockedAvatars: AvatarType[];\r\n  } {\r\n    const oldLevel = user.level;\r\n    const newXP = user.xp + xpAmount;\r\n    const newLevel = calculateLevel(newXP);\r\n    const levelUp = newLevel > oldLevel;\r\n    const unlockedAvatars = levelUp ? getNewlyUnlockedAvatars(oldLevel, newLevel) : [];\r\n\r\n    return {\r\n      xpGained: xpAmount,\r\n      levelUp,\r\n      newLevel,\r\n      unlockedAvatars\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 今日の遭遇リストを取得\r\n   */\r\n  getTodayEncounters(userId: string): string[] {\r\n    const today = getTodayString();\r\n    return this.encounters\r\n      .filter(encounter => encounter.userId === userId && encounter.date === today)\r\n      .map(encounter => encounter.otherUserId);\r\n  }\r\n\r\n  /**\r\n   * 今日ログインしているかチェック\r\n   */\r\n  hasLoggedInToday(userId: string): boolean {\r\n    const today = getTodayString();\r\n    return this.logins.some(\r\n      login => login.userId === userId && login.date === today\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ユーザーの統計情報を取得\r\n   */\r\n  getUserStats(userId: string): {\r\n    totalEncounters: number;\r\n    todayEncounters: number;\r\n    totalLogins: number;\r\n    loginStreak: number;\r\n  } {\r\n    const totalEncounters = this.encounters.filter(e => e.userId === userId).length;\r\n    const todayEncounters = this.getTodayEncounters(userId).length;\r\n    const totalLogins = this.logins.filter(l => l.userId === userId).length;\r\n    \r\n    // ログイン連続日数の計算\r\n    const userLogins = this.logins\r\n      .filter(l => l.userId === userId)\r\n      .sort((a, b) => b.timestamp - a.timestamp);\r\n    \r\n    let loginStreak = 0;\r\n    let currentDate = new Date();\r\n    \r\n    for (const login of userLogins) {\r\n      const loginDate = new Date(login.timestamp);\r\n      const dayDiff = Math.floor((currentDate.getTime() - loginDate.getTime()) / (1000 * 60 * 60 * 24));\r\n      \r\n      if (dayDiff === loginStreak) {\r\n        loginStreak++;\r\n        currentDate = loginDate;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      totalEncounters,\r\n      todayEncounters,\r\n      totalLogins,\r\n      loginStreak\r\n    };\r\n  }\r\n\r\n  /**\r\n   * データをシリアライズ\r\n   */\r\n  serialize(): {\r\n    encounters: EncounterRecord[];\r\n    logins: LoginRecord[];\r\n  } {\r\n    return {\r\n      encounters: this.encounters,\r\n      logins: this.logins\r\n    };\r\n  }\r\n\r\n  /**\r\n   * データをデシリアライズ\r\n   */\r\n  static deserialize(data: {\r\n    encounters: EncounterRecord[];\r\n    logins: LoginRecord[];\r\n  }): GrowthSystem {\r\n    return new GrowthSystem(data.encounters, data.logins);\r\n  }\r\n}","// 出社アバター機能のタイプ定義\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  message: string;\r\n  avatar: string;\r\n  avatarType: AvatarType;\r\n  xp: number;\r\n  level: number;\r\n  lastLogin: string; // ISO date string\r\n  lastSeen: number; // timestamp for compatibility\r\n}\r\n\r\nexport interface EncounterRecord {\r\n  userId: string;\r\n  otherUserId: string;\r\n  date: string; // YYYY-MM-DD format\r\n}\r\n\r\nexport interface LoginRecord {\r\n  userId: string;\r\n  timestamp: number;\r\n  date: string; // YYYY-MM-DD format\r\n}\r\n\r\nexport interface XPEvent {\r\n  type: 'login' | 'encounter';\r\n  amount: number;\r\n  message: string;\r\n}\r\n\r\nexport interface LevelUpEvent {\r\n  newLevel: number;\r\n  unlockedAvatars: AvatarType[];\r\n}\r\n\r\nexport interface AppState {\r\n  currentScreen: 'setup' | 'plaza';\r\n  user: User;\r\n  todayEncounters: Set<string>;\r\n  hasLoggedInToday: boolean;\r\n}\r\n\r\n// アバタータイプの定義\r\nexport enum AvatarType {\r\n  HUMAN = 'human',\r\n  CAT = 'cat', \r\n  ROBOT = 'robot',\r\n  WIZARD = 'wizard',\r\n  DRAGON = 'dragon',\r\n  BUG = 'bug'\r\n}\r\n\r\n// アバターの表示文字とレベル制限\r\nexport const AVATAR_CONFIG: Record<AvatarType, { emoji: string; unlockLevel: number; name: string }> = {\r\n  [AvatarType.HUMAN]: { emoji: '🧑‍💻', unlockLevel: 1, name: '人' },\r\n  [AvatarType.CAT]: { emoji: '🐱', unlockLevel: 2, name: '猫' },\r\n  [AvatarType.ROBOT]: { emoji: '🤖', unlockLevel: 3, name: 'ロボット' },\r\n  [AvatarType.WIZARD]: { emoji: '🧙‍♂️', unlockLevel: 5, name: '魔法使い' },\r\n  [AvatarType.DRAGON]: { emoji: '🐉', unlockLevel: 10, name: 'ドラゴン' },\r\n  [AvatarType.BUG]: { emoji: '🐛', unlockLevel: 10, name: 'バグ' }\r\n};\r\n\r\n// XP・レベル計算関数\r\nexport const calculateRequiredXP = (level: number): number => {\r\n  return 50 * level * level;\r\n};\r\n\r\nexport const calculateLevel = (xp: number): number => {\r\n  let level = 1;\r\n  while (calculateRequiredXP(level + 1) <= xp) {\r\n    level++;\r\n  }\r\n  return level;\r\n};\r\n\r\nexport const getUnlockedAvatars = (level: number): AvatarType[] => {\r\n  return Object.entries(AVATAR_CONFIG)\r\n    .filter(([_, config]) => config.unlockLevel <= level)\r\n    .map(([type]) => type as AvatarType);\r\n};\r\n\r\nexport const getNewlyUnlockedAvatars = (oldLevel: number, newLevel: number): AvatarType[] => {\r\n  const oldUnlocked = getUnlockedAvatars(oldLevel);\r\n  const newUnlocked = getUnlockedAvatars(newLevel);\r\n  return newUnlocked.filter(avatar => !oldUnlocked.includes(avatar));\r\n};\r\n\r\n// 日付ユーティリティ\r\nexport const getTodayString = (): string => {\r\n  return new Date().toISOString().split('T')[0]; // YYYY-MM-DD\r\n};\r\n\r\nexport const isToday = (dateString: string): boolean => {\r\n  return dateString === getTodayString();\r\n};","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { GrowthSystem } from './GrowthSystem';\r\nimport { AppState, AVATAR_CONFIG, AvatarType, User } from './types';\r\n\r\nfunction getNonce() {\r\n  let text = '';\r\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  for (let i = 0; i < 32; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n}\r\n\r\nexport class NearbyCodingViewProvider implements vscode.WebviewViewProvider {\r\n  public static readonly viewType = 'nearbyCoding.plaza';\r\n  \r\n  private _view?: vscode.WebviewView;\r\n  private _context: vscode.ExtensionContext;\r\n  private _userId: string;\r\n  private _postInterval?: any;\r\n  private _getInterval?: any;\r\n  private _disposed = false;\r\n  private _lastSeenUsers = new Map<string, number>(); // ユーザーIDと最後に見た時刻を記録\r\n  private _growthSystem: GrowthSystem;\r\n  private _appState: AppState;\r\n\r\n  constructor(private readonly _extensionContext: vscode.ExtensionContext) {\r\n    this._context = _extensionContext;\r\n    \r\n    // ユーザーIDを取得または生成\r\n    this._userId = this._context.globalState.get('nearbyCoding.userId') || this._generateUserId();\r\n    this._context.globalState.update('nearbyCoding.userId', this._userId);\r\n    \r\n    // 成長システムの初期化\r\n    const growthData = this._context.globalState.get('nearbyCoding.growthData');\r\n    this._growthSystem = growthData ? \r\n      GrowthSystem.deserialize(growthData as { encounters: any[]; logins: any[] }) : \r\n      new GrowthSystem();\r\n    \r\n    // アプリケーション状態の初期化\r\n    this._appState = this._loadAppState();\r\n  }\r\n\r\n  private _generateUserId(): string {\r\n    return 'user-' + Math.random().toString(36).substr(2, 9) + '-' + Date.now().toString(36);\r\n  }\r\n\r\n  private _loadAppState(): AppState {\r\n    const savedUser = this._context.globalState.get<User>('nearbyCoding.user');\r\n    const config = this._getConfiguration();\r\n    \r\n    const defaultUser: User = {\r\n      id: this._userId,\r\n      name: config.name,\r\n      message: config.message,\r\n      avatar: config.avatar,\r\n      avatarType: AvatarType.HUMAN,\r\n      xp: 0,\r\n      level: 1,\r\n      lastLogin: '',\r\n      lastSeen: 0\r\n    };\r\n\r\n    const user = savedUser ? { ...defaultUser, ...savedUser } : defaultUser;\r\n    \r\n    return {\r\n      currentScreen: savedUser ? 'plaza' : 'setup',\r\n      user,\r\n      todayEncounters: new Set<string>(),\r\n      hasLoggedInToday: this._growthSystem.hasLoggedInToday(this._userId)\r\n    };\r\n  }\r\n\r\n  private _saveAppState(): void {\r\n    this._context.globalState.update('nearbyCoding.user', this._appState.user);\r\n    this._context.globalState.update('nearbyCoding.growthData', this._growthSystem.serialize());\r\n  }\r\n\r\n  private _handleSetupComplete(userData: { name: string; message: string; avatarType: AvatarType }): void {\r\n    // ユーザー情報を更新\r\n    this._appState.user = {\r\n      ...this._appState.user,\r\n      name: userData.name,\r\n      message: userData.message,\r\n      avatarType: userData.avatarType,\r\n      avatar: AVATAR_CONFIG[userData.avatarType].emoji\r\n    };\r\n    \r\n    this._appState.currentScreen = 'plaza';\r\n    this._saveAppState();\r\n    \r\n    // 設定も更新\r\n    const config = vscode.workspace.getConfiguration('nearbyCoding');\r\n    config.update('name', userData.name, vscode.ConfigurationTarget.Global);\r\n    config.update('message', userData.message, vscode.ConfigurationTarget.Global);\r\n    config.update('avatar', AVATAR_CONFIG[userData.avatarType].emoji, vscode.ConfigurationTarget.Global);\r\n    \r\n    // ログイン処理\r\n    this._processLogin();\r\n    \r\n    // Webviewに状態を送信\r\n    this._sendAppStateToWebview();\r\n  }\r\n\r\n  private _processLogin(): void {\r\n    // 新しい仕様では、_sendLoginメソッドでログイン処理を統合\r\n    // この関数は互換性のために残すが、実際の処理は_sendLoginで行う\r\n    this._sendLogin();\r\n  }\r\n\r\n  private _sendAppStateToWebview(): void {\r\n    if (!this._view) return;\r\n    \r\n    this._view.webview.postMessage({\r\n      command: 'updateAppState',\r\n      appState: this._appState\r\n    });\r\n  }\r\n\r\n  public resolveWebviewView(\r\n    webviewView: vscode.WebviewView,\r\n    context: vscode.WebviewViewResolveContext,\r\n    token: vscode.CancellationToken\r\n  ) {\r\n    this._view = webviewView;\r\n\r\n    webviewView.webview.options = {\r\n      enableScripts: true,\r\n      localResourceRoots: [this._extensionContext.extensionUri]\r\n    };\r\n\r\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n    \r\n    // Webviewからのメッセージを処理\r\n    webviewView.webview.onDidReceiveMessage(\r\n      message => {\r\n        switch (message.command) {\r\n          case 'setupComplete':\r\n            this._handleSetupComplete(message.userData);\r\n            break;\r\n        }\r\n      },\r\n      undefined,\r\n      this._context.subscriptions\r\n    );\r\n    \r\n    // 設定変更時の処理\r\n    this._context.subscriptions.push(\r\n      vscode.workspace.onDidChangeConfiguration(e => {\r\n        if (e.affectsConfiguration('nearbyCoding')) {\r\n          // 設定変更時は即座にWebviewを更新してからループを再開\r\n          this._updateWebviewWithCurrentConfig();\r\n          this._restartLoops();\r\n        }\r\n      })\r\n    );\r\n\r\n    // 初期状態を送信\r\n    this._sendAppStateToWebview();\r\n    \r\n    // ログイン処理\r\n    if (this._appState.currentScreen === 'plaza') {\r\n      this._processLogin();\r\n    }\r\n\r\n    // ビューが表示されたら開始\r\n    this._startLoops();\r\n\r\n    // Webviewが破棄される時のクリーンアップ\r\n    webviewView.onDidDispose(() => {\r\n      this._stopLoops();\r\n    });\r\n  }\r\n\r\n  private _getHtmlForWebview(webview: vscode.Webview): string {\r\n    const webviewJsUri = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionContext.extensionUri, 'dist', 'webview.js'));\r\n    const nonce = getNonce();\r\n\r\n    return `<!DOCTYPE html>\r\n<html lang=\"ja\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; script-src 'nonce-${nonce}'; style-src ${webview.cspSource} 'unsafe-inline'; connect-src https:;\">\r\n    <title>Nearby Coding</title>\r\n</head>\r\n<body>\r\n    <div id=\"root\"></div>\r\n    <script nonce=\"${nonce}\" src=\"${webviewJsUri}\"></script>\r\n</body>\r\n</html>`;\r\n  }\r\n\r\n  private _getConfiguration() {\r\n    const config = vscode.workspace.getConfiguration('nearbyCoding');\r\n    let serverUrl = config.get<string>('serverUrl', 'https://nearby-coding-server-i3mbz1w0s-fujii-yoshinobus-projects.vercel.app');\r\n    \r\n    // serverUrl が /api/nearby で終わっていない場合は追加\r\n    if (!serverUrl.endsWith('/api/nearby')) {\r\n      serverUrl = serverUrl.replace(/\\/$/, '') + '/api/nearby';\r\n    }\r\n    \r\n    return {\r\n      serverUrl: serverUrl,\r\n      name: config.get<string>('name', 'Anonymous'),\r\n      message: config.get<string>('message', 'よろしく！'),\r\n      avatar: config.get<string>('avatar', '🧑‍💻')\r\n    };\r\n  }\r\n\r\n  private async _sendLogin() {\r\n    if (this._disposed) return;\r\n    \r\n    const config = this._getConfiguration();\r\n    \r\n    try {\r\n      const response = await fetch(config.serverUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'login',\r\n          id: this._userId,\r\n          name: this._appState.user.name,\r\n          message: this._appState.user.message,\r\n          avatar: this._appState.user.avatar,\r\n          avatarType: this._appState.user.avatarType\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        \r\n        if (result.success) {\r\n          // サーバーからのレスポンスでユーザー情報を更新\r\n          this._appState.user = result.user;\r\n          this._saveAppState();\r\n          \r\n          // XPイベントの処理\r\n          if (result.loginXP > 0) {\r\n            this._view?.webview.postMessage({\r\n              command: 'xpGained',\r\n              eventType: 'login',\r\n              amount: result.loginXP,\r\n              message: '出社！'\r\n            });\r\n          }\r\n          \r\n          // レベルアップの処理\r\n          if (result.levelUp) {\r\n            this._view?.webview.postMessage({\r\n              command: 'levelUp',\r\n              newLevel: result.newLevel,\r\n              unlockedAvatars: []  // TODO: サーバーから取得\r\n            });\r\n          }\r\n          \r\n          // 遭遇XPの処理\r\n          if (result.encounters && result.encounters.length > 0) {\r\n            for (const encounter of result.encounters) {\r\n              this._view?.webview.postMessage({\r\n                command: 'xpGained',\r\n                eventType: 'encounter',\r\n                amount: encounter.xpGained,\r\n                message: `${encounter.user.name}と遭遇！`\r\n              });\r\n            }\r\n          }\r\n          \r\n          // 今日のユーザー一覧を更新\r\n          this._view?.webview.postMessage({\r\n            command: 'updateUsers',\r\n            users: result.todayUsers || [],\r\n            newUsers: result.todayUsers || []\r\n          });\r\n        }\r\n      } else {\r\n        console.warn('Nearby Coding: Login failed', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Nearby Coding: Login error', error);\r\n    }\r\n  }\r\n\r\n  private async _fetchUsers() {\r\n    if (this._disposed || !this._view) return;\r\n    \r\n    const config = this._getConfiguration();\r\n    // /users エンドポイントを使用\r\n    const usersUrl = config.serverUrl.replace('/api/nearby', '/api/users');\r\n    \r\n    try {\r\n      const response = await fetch(usersUrl, {\r\n        method: 'GET'\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        \r\n        if (result.success && result.users) {\r\n          // 新規ユーザーまたは再参加ユーザーを検知と遭遇処理\r\n          const newUsers: User[] = [];\r\n          const currentTime = Date.now();\r\n          \r\n          result.users.forEach((user: User) => {\r\n            if (user.id !== this._userId) {\r\n              const lastSeen = this._lastSeenUsers.get(user.id) || 0;\r\n              // 初回参加、または5分以上経過後の再参加\r\n              if (!lastSeen || (currentTime - lastSeen) > 300000) {\r\n                newUsers.push(user);\r\n                \r\n                // 遭遇処理\r\n                this._processEncounter(user.id);\r\n              }\r\n              this._lastSeenUsers.set(user.id, currentTime);\r\n            }\r\n          });\r\n          \r\n          // Webviewにユーザー情報を送信\r\n          this._view.webview.postMessage({\r\n            command: 'updateUsers',\r\n            users: result.users,\r\n            newUsers: newUsers\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('Nearby Coding: Fetch users error', error);\r\n    }\r\n  }\r\n\r\n  private async _processEncounter(otherUserId: string): Promise<void> {\r\n    if (this._disposed) return;\r\n    \r\n    const config = this._getConfiguration();\r\n    \r\n    try {\r\n      const response = await fetch(config.serverUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'encounter',\r\n          id: this._userId,\r\n          encounterUserId: otherUserId\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        \r\n        if (result.success && result.xpGained > 0) {\r\n          // ユーザー情報を更新\r\n          this._appState.user = result.user;\r\n          this._appState.todayEncounters.add(otherUserId);\r\n          this._saveAppState();\r\n          \r\n          // XP獲得をWebviewに通知\r\n          this._view?.webview.postMessage({\r\n            command: 'xpGained',\r\n            eventType: 'encounter',\r\n            amount: result.xpGained,\r\n            message: '遭遇！'\r\n          });\r\n          \r\n          // レベルアップした場合\r\n          if (result.levelUp) {\r\n            this._view?.webview.postMessage({\r\n              command: 'levelUp',\r\n              newLevel: result.newLevel,\r\n              unlockedAvatars: [] // TODO: サーバーから取得\r\n            });\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('Nearby Coding: Encounter error', error);\r\n    }\r\n  }\r\n\r\n  private _startLoops() {\r\n    this._stopLoops();\r\n    \r\n    // 初回ログイン\r\n    this._sendLogin();\r\n    \r\n    // 10秒ごとにユーザー情報を更新\r\n    this._postInterval = setInterval(() => {\r\n      this._sendLogin();\r\n    }, 10000);\r\n    \r\n    // 6秒ごとにGET\r\n    this._getInterval = setInterval(() => {\r\n      this._fetchUsers();\r\n    }, 6000);\r\n    \r\n    // 初回fetch\r\n    setTimeout(() => {\r\n      this._fetchUsers();\r\n    }, 1000);\r\n  }\r\n\r\n  private _stopLoops() {\r\n    if (this._postInterval) {\r\n      clearInterval(this._postInterval);\r\n      this._postInterval = undefined;\r\n    }\r\n    if (this._getInterval) {\r\n      clearInterval(this._getInterval);\r\n      this._getInterval = undefined;\r\n    }\r\n  }\r\n\r\n  private _updateWebviewWithCurrentConfig() {\r\n    if (!this._view) return;\r\n    \r\n    // 現在の設定でアプリ状態を更新\r\n    this._sendAppStateToWebview();\r\n  }\r\n\r\n  private _restartLoops() {\r\n    this._stopLoops();\r\n    this._startLoops();\r\n  }\r\n\r\n  public dispose() {\r\n    this._disposed = true;\r\n    this._stopLoops();\r\n  }\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  const provider = new NearbyCodingViewProvider(context);\r\n  \r\n  context.subscriptions.push(\r\n    vscode.window.registerWebviewViewProvider(\r\n      NearbyCodingViewProvider.viewType, \r\n      provider,\r\n      { webviewOptions: { retainContextWhenHidden: true } }\r\n    )\r\n  );\r\n}\r\n\r\nexport function deactivate() {\r\n  // クリーンアップは自動的に行われる\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(733);\n"],"names":["GrowthSystem","constructor","encounters","logins","this","processLogin","user","today","getTodayString","some","login","userId","id","date","xpGained","levelUp","newLevel","level","unlockedAvatars","push","timestamp","Date","now","addXP","processEncounter","otherUserId","encounter","xpAmount","source","oldLevel","newXP","xp","calculateLevel","getNewlyUnlockedAvatars","getTodayEncounters","filter","map","hasLoggedInToday","getUserStats","totalEncounters","e","length","todayEncounters","totalLogins","l","userLogins","sort","a","b","loginStreak","currentDate","loginDate","Math","floor","getTime","serialize","deserialize","data","AvatarType","AVATAR_CONFIG","HUMAN","emoji","unlockLevel","name","CAT","ROBOT","WIZARD","DRAGON","BUG","calculateRequiredXP","getUnlockedAvatars","Object","entries","_","config","type","oldUnlocked","avatar","includes","toISOString","split","isToday","dateString","module","exports","require","NearbyCodingViewProvider","_extensionContext","_disposed","_lastSeenUsers","Map","_context","_userId","globalState","get","_generateUserId","update","growthData","_growthSystem","_appState","_loadAppState","random","toString","substr","savedUser","_getConfiguration","defaultUser","message","avatarType","lastLogin","lastSeen","currentScreen","Set","_saveAppState","_handleSetupComplete","userData","vscode","workspace","getConfiguration","ConfigurationTarget","Global","_processLogin","_sendAppStateToWebview","_sendLogin","_view","webview","postMessage","command","appState","resolveWebviewView","webviewView","context","token","options","enableScripts","localResourceRoots","extensionUri","html","_getHtmlForWebview","onDidReceiveMessage","undefined","subscriptions","onDidChangeConfiguration","affectsConfiguration","_updateWebviewWithCurrentConfig","_restartLoops","_startLoops","onDidDispose","_stopLoops","webviewJsUri","asWebviewUri","Uri","joinPath","nonce","text","i","charAt","possible","getNonce","cspSource","serverUrl","endsWith","replace","response","fetch","method","headers","body","JSON","stringify","action","ok","result","json","success","loginXP","eventType","amount","users","todayUsers","newUsers","console","warn","status","error","_fetchUsers","usersUrl","currentTime","forEach","_processEncounter","set","encounterUserId","add","_postInterval","setInterval","_getInterval","setTimeout","clearInterval","dispose","viewType","provider","window","registerWebviewViewProvider","webviewOptions","retainContextWhenHidden","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}